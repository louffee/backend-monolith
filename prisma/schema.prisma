// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Investor {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  InvestorAuthentication InvestorAuthentication[]
  InvestorProfile        InvestorProfile[]
  InvestorContact        InvestorContact[]
  Property               Property[]
}

model InvestorAuthentication {
  id         String   @id @default(uuid())
  investor   Investor @relation(fields: [investorId], references: [id])
  investorId String
  password   String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model InvestorContact {
  id              String   @id @default(uuid())
  investor        Investor @relation(fields: [investorId], references: [id])
  investorId      String
  email           String
  phone           String?
  twitterHandle   String?
  facebookHandle  String?
  linkedInHandle  String?
  instagramHandle String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model InvestorProfile {
  id         String   @id @default(uuid())
  investor   Investor @relation(fields: [investorId], references: [id])
  investorId String
  name       String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Property {
  id          String  @id @default(uuid())
  name        String
  description String?
  address     String
  city        String
  region      String
  zip         String
  country     String
  latitude    Float?
  longitude   Float?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  ownerInvestorId String
  ownerInvestor   Investor @relation(fields: [ownerInvestorId], references: [id])

  PropertyDetails PropertyDetails[]
}

model PropertyDetails {
  id               String  @id @default(uuid())
  propertyId       String
  description      String?
  bedrooms         Int?
  bedroomsDetails  String?
  bathrooms        Int?
  bathroomsDetails String?
  area             Int?
  areaDetails      String?
  price            Int?
  priceDetails     String?
  currency         String?
  currencyDetails  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  property Property @relation(fields: [propertyId], references: [id])
}
